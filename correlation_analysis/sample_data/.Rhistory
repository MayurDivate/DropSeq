mtext(corText)
dev.off()
par(mar=c(20,20,20,20))
ggplot(dfX,aes(x = log10(HM0323.75_S4), y= log10(SRR1873277)
)) + geom_point(aes(color = SRR1873277)) + geom_smooth()
}
}
nsamples <- ncol(humanAT) - 1
samples <- colnames(humanAT)
totalReaddf <- read.table(fileTotalReads,header=F,stringsAsFactors = F,sep = "\t")
head(totalReaddf)
df <- humanAT[,c(i,nsamples+1)]
dfX <- df[,c(1,x)]
head(dfX)
dfX <- dfX[rowSums(dfX) > 0,]
options(digits = 12)
dfX <- round(dfX[,c(1:2)],4)
scaleA <- totalReaddf[i,2]
scaleA <-  scaleA / 1000000
scaleA <- round(scaleA,2)
scaleA
scaleB <- totalReaddf[nsamples+(x-1),2]
scaleB <- scaleB / 1000000
scaleB <- round(scaleB,2)
scaleB
head(dfX)
dfX[,1] <- dfX[,1]*scaleA
head(dfX)
dfX[,2] <- dfX[,2]*scaleB
head(dfX)
dfX <- round(dfX[,c(1:2)],4)
dfX <- dfX+1
head(dfX)
corText <- cor( dfX[,1] , dfX[,2], method = "pearson" )
corText <- round(corText,2)
corText <- paste("pearson R=",corText)
corText
imgFile <- paste(samples[i], samples[nsamples+(x-1)],sep = "_vs_");
imgFile <- paste(imgFile,"_pearson.jpg",sep = "")
print(imgFile)
print(i)
print(x)
dfX <- dfX + 1
plot(log10(dfX[,1]),log10(dfX[,2]),pch=16, xlab = samples[i], ylab = samples[nsamples+(x-1)])
mtext(corText)
jpeg(imgFile,width = 1000, height = 1000,quality = 100,pointsize = 12,res=200)
plot(log10(dfX[,1]),log10(dfX[,2]),pch=16, xlab = samples[i], ylab = samples[nsamples+(x-1)])
mtext(corText)
dev.off()
par(mar=c(20,20,20,20))
ggplot(dfX,aes(x = log10(HM0323.75_S4), y= log10(SRR1873277)
)) + geom_point(aes(color = SRR1873277)) + geom_smooth()
setwd("~/Work/0_GitHub/DropSeq/correlation_analysis/sample_data/")
fileAT <- "AverageTrancriptsPerGene.txt"
fileTotalReads <- "TotalReadsPersample.txt"
humanAT <- read.table(fileAT,header = T,sep = "\t",stringsAsFactors = F)
humanAT[is.na(humanAT)] = 0
row.names(humanAT) <- humanAT[,1]
humanAT <- humanAT[,c(2:ncol(humanAT))]
nsamples <- ncol(humanAT) - 1
samples <- colnames(humanAT)
totalReaddf <- read.table(fileTotalReads,header=F,stringsAsFactors = F,sep = "\t")
head(totalReaddf)
for(i in 1:nsamples){
df <- humanAT[,c(i,nsamples+1)]
for(x in 1:nsamples){
dfX <- df[,c(1,x)]
head(dfX)
dfX <- dfX[rowSums(dfX) > 0,]
options(digits = 12)
dfX <- round(dfX[,c(1:2)],4)
scaleA <- totalReaddf[i,2]
scaleA <-  scaleA / 1000000
scaleA <- round(scaleA,2)
scaleA
scaleB <- totalReaddf[nsamples+(x-1),2]
scaleB <- scaleB / 1000000
scaleB <- round(scaleB,2)
scaleB
head(dfX)
dfX[,1] <- dfX[,1]*scaleA
head(dfX)
dfX[,2] <- dfX[,2]*scaleB
head(dfX)
dfX <- round(dfX[,c(1:2)],4)
dfX <- dfX+1
head(dfX)
corText <- cor( dfX[,1] , dfX[,2], method = "pearson" )
corText <- round(corText,2)
corText <- paste("pearson R=",corText)
corText
imgFile <- paste(samples[i], samples[nsamples+(x-1)],sep = "_vs_");
imgFile <- paste(imgFile,"_pearson.jpg",sep = "")
print(imgFile)
print(i)
print(x)
dfX <- dfX + 1
jpeg(imgFile,width = 1000, height = 1000,quality = 100,pointsize = 12,res=200)
plot(log10(dfX[,1]),log10(dfX[,2]),pch=16, xlab = samples[i], ylab = samples[nsamples+(x-1)])
mtext(corText)
dev.off()
par(mar=c(20,20,20,20))
ggplot(dfX,aes(x = log10(HM0323.75_S4), y= log10(SRR1873277)
)) + geom_point(aes(color = SRR1873277)) + geom_smooth()
}
}
ggplot(dfX,aes(x = log10(dfX[,1]), y= log10(dfX[,2])
)) + geom_point() + geom_smooth()
plot(log10(dfX[,1]),log10(dfX[,2]),pch=16, xlab = samples[i], ylab = samples[nsamples+(x-1)])
jpeg(imgFile,width = 1000, height = 1000,quality = 100,pointsize = 12,res=200)
plot(log10(dfX[,1]),log10(dfX[,2]),pch=16, xlab = samples[i], ylab = samples[nsamples+(x-1)])
mtext(corText)
dev.off()
ggplot(dfX,aes(x = log10(dfX[,1]), y= log10(dfX[,2])
)) + geom_point()
plot <- ggplot(dfX,aes(x = log10(dfX[,1]), y= log10(dfX[,2]))) + geom_point()
plot <- plot + geom_abline()
plot
plot <- ggplot(dfX,aes(x = log10(dfX[,1]), y= log10(dfX[,2]))) + geom_point()
plot <- plot + geom_abline(dfX,aes(x = log10(dfX[,1]), y= log10(dfX[,2])))
plot
plot <- plot + geom_abline(dfX,aes(x = log10(dfX[,1]), y= log10(dfX[,2])))
plot <- plot + geom_abline(dfX,aes(log10(dfX[,1]), log10(dfX[,2])))
plot <- plot + geom_abline(log10(dfX[,1]), log10(dfX[,2]))
plot(log10(dfX[,1]),log10(dfX[,2]),pch=16, xlab = samples[i], ylab = samples[nsamples+(x-1)])
jpeg(imgFile,width = 1000, height = 1000,quality = 100,pointsize = 12,res=200)
plot(log10(dfX[,1]),log10(dfX[,2]),pch=16, xlab = samples[i], ylab = samples[nsamples+(x-1)])
mtext(corText)
abline()
dev.off()
par(mar=c(20,20,20,20))
plot(log10(dfX[,1]),log10(dfX[,2]),pch=16, xlab = samples[i], ylab = samples[nsamples+(x-1)])
mtext(corText)
dev.off()
plot(log10(dfX[,1]),log10(dfX[,2]),pch=16, xlab = samples[i], ylab = samples[nsamples+(x-1)])
abline()
abline(lm(log10(dfX[,2])~log10(dfX[,1])))
plot <- plot + geom_abline(method = "lm")
plot <- ggplot(dfX,aes(x = log10(dfX[,1]), y= log10(dfX[,2]))) + geom_point()
plot <- plot + geom_abline(method = "lm")
plot
plot <- plot + geom_abline(dfX,aes(x = log10(dfX[,1]), y= log10(dfX[,2])))
plot <- ggplot(dfX,aes(x = log10(dfX[,1]), y= log10(dfX[,2]))) + geom_point()
plot <- plot + geom_abline(dfX,aes(x = log10(dfX[,1]), y= log10(dfX[,2])))
plot <- ggplot(dfX,aes(x = log10(dfX[,1]), y= log10(dfX[,2]))) + geom_point()
plot
par(mar=c(20,20,20,20))
par(mar=c(20,20,20,20))
plot <- ggplot(dfX,aes(x = log10(dfX[,1]), y= log10(dfX[,2]))) + geom_point()
plot
plot(log10(dfX[,1]),log10(dfX[,2]),pch=16, xlab = samples[i], ylab = samples[nsamples+(x-1)])
dev.off()
plot(log10(dfX[,1]),log10(dfX[,2]),pch=16, xlab = samples[i], ylab = samples[nsamples+(x-1)])
par(mar=c(20,20,20,20))
plot(log10(dfX[,1]),log10(dfX[,2]),pch=16, xlab = samples[i], ylab = samples[nsamples+(x-1)])
par(mar=c(10,10,10,10))
plot(log10(dfX[,1]),log10(dfX[,2]),pch=16, xlab = samples[i], ylab = samples[nsamples+(x-1)])
par(mar=c(1,1,1,1))
plot(log10(dfX[,1]),log10(dfX[,2]),pch=16, xlab = samples[i], ylab = samples[nsamples+(x-1)])
mtext(corText)
abline(lm(log10(dfX[,2])~log10(dfX[,1])))
par(mar=c(4,1,1,1))
plot(log10(dfX[,1]),log10(dfX[,2]),pch=16, xlab = samples[i], ylab = samples[nsamples+(x-1)])
mtext(corText)
abline(lm(log10(dfX[,2])~log10(dfX[,1])))
par(mar=c(5,3,1,1))
plot(log10(dfX[,1]),log10(dfX[,2]),pch=16, xlab = samples[i], ylab = samples[nsamples+(x-1)])
mtext(corText)
abline(lm(log10(dfX[,2])~log10(dfX[,1])))
dev.off()
par(mar=c(5,3,1,1))
plot(log10(dfX[,1]),log10(dfX[,2]),pch=16, xlab = samples[i], ylab = samples[nsamples+(x-1)])
mtext(corText)
abline(lm(log10(dfX[,2])~log10(dfX[,1])))
par(mar=c(5,5,2,1))
plot(log10(dfX[,1]),log10(dfX[,2]),pch=16, xlab = samples[i], ylab = samples[nsamples+(x-1)])
mtext(corText)
abline(lm(log10(dfX[,2])~log10(dfX[,1])))
nsamples
plot(log10(dfX[,1]),log10(dfX[,2]),pch=16, xlab = samples[i], ylab = samples[nsamples+1])
mtext(corText)
abline(lm(log10(dfX[,2])~log10(dfX[,1])))
par(mar=c(4,4,2,1))
plot(log10(dfX[,1]),log10(dfX[,2]),pch=16, xlab = samples[i], ylab = samples[nsamples+1])
mtext(corText)
abline(lm(log10(dfX[,2])~log10(dfX[,1])))
par(mar=c(5,5,2,1))
plot(log10(dfX[,1]),log10(dfX[,2]),pch=16, xlab = samples[i], ylab = samples[nsamples+1])
mtext(corText)
abline(lm(log10(dfX[,2])~log10(dfX[,1])))
abline(lm(log10(dfX[,2])~log10(dfX[,1])),col="red")
print(imgFile)
setwd("~/Work/0_GitHub/DropSeq/correlation_analysis/sample_data/")
fileAT <- "AverageTrancriptsPerGene.txt"
fileTotalReads <- "TotalReadsPersample.txt"
humanAT <- read.table(fileAT,header = T,sep = "\t",stringsAsFactors = F)
humanAT[is.na(humanAT)] = 0
row.names(humanAT) <- humanAT[,1]
humanAT <- humanAT[,c(2:ncol(humanAT))]
nsamples <- ncol(humanAT) - 1
samples <- colnames(humanAT)
totalReaddf <- read.table(fileTotalReads,header=F,stringsAsFactors = F,sep = "\t")
head(totalReaddf)
for(i in 1:nsamples){
df <- humanAT[,c(i,nsamples+1)]
for(x in 1:nsamples){
dfX <- df[,c(1,x)]
head(dfX)
dfX <- dfX[rowSums(dfX) > 0,]
options(digits = 12)
dfX <- round(dfX[,c(1:2)],4)
scaleA <- totalReaddf[i,2]
scaleA <-  scaleA / 1000000
scaleA <- round(scaleA,2)
scaleA
scaleB <- totalReaddf[nsamples+(x-1),2]
scaleB <- scaleB / 1000000
scaleB <- round(scaleB,2)
scaleB
head(dfX)
dfX[,1] <- dfX[,1]*scaleA
head(dfX)
dfX[,2] <- dfX[,2]*scaleB
head(dfX)
dfX <- round(dfX[,c(1:2)],4)
dfX <- dfX+1
head(dfX)
corText <- cor( dfX[,1] , dfX[,2], method = "pearson" )
corText <- round(corText,2)
corText <- paste("pearson R=",corText)
corText
imgFile <- paste(samples[i], samples[nsamples+(x-1)],sep = "_vs_");
imgFile <- paste(imgFile,"_pearson.jpg",sep = "")
dfX <- dfX + 1
jpeg(imgFile,width = 1000, height = 1000,quality = 100,pointsize = 12,res=200)
par(mar=c(5,5,2,1))
plot(log10(dfX[,1]),log10(dfX[,2]),pch=16, xlab = samples[i], ylab = samples[nsamples+1])
mtext(corText)
abline(lm(log10(dfX[,2])~log10(dfX[,1])),col="red")
dev.off()
}
}
df <- humanAT[,c(i,nsamples+1)]
dfX <- df[,c(1,x)]
x
df <- humanAT[,c(i,nsamples+1)]
dfX <- df[,c(1,2)]
head(dfX)
dfX <- dfX[rowSums(dfX) > 0,]
options(digits = 12)
dfX <- round(dfX[,c(1:2)],4)
scaleA <- totalReaddf[i,2]
scaleA <-  scaleA / 1000000
scaleA <- round(scaleA,2)
scaleA
scaleB <- totalReaddf[nsamples+(x-1),2]
scaleB <- scaleB / 1000000
scaleB <- round(scaleB,2)
scaleB
head(dfX)
dfX[,1] <- dfX[,1]*scaleA
head(dfX)
dfX[,2] <- dfX[,2]*scaleB
head(dfX)
dfX <- round(dfX[,c(1:2)],4)
dfX <- dfX+1
head(dfX)
corText <- cor( dfX[,1] , dfX[,2], method = "pearson" )
corText <- round(corText,2)
corText <- paste("pearson R=",corText)
corText
imgFile <- paste(samples[i], samples[nsamples+(x-1)],sep = "_vs_");
imgFile <- paste(imgFile,"_pearson.jpg",sep = "")
dfX <- dfX + 1
jpeg(imgFile,width = 1000, height = 1000,quality = 100,pointsize = 12,res=200)
par(mar=c(5,5,2,1))
plot(log10(dfX[,1]),log10(dfX[,2]),pch=16, xlab = samples[i], ylab = samples[nsamples+1])
mtext(corText)
abline(lm(log10(dfX[,2])~log10(dfX[,1])),col="red")
dev.off()
setwd("~/Work/0_GitHub/DropSeq/correlation_analysis/sample_data/")
fileAT <- "AverageTrancriptsPerGene.txt"
fileTotalReads <- "TotalReadsPersample.txt"
humanAT <- read.table(fileAT,header = T,sep = "\t",stringsAsFactors = F)
humanAT[is.na(humanAT)] = 0
row.names(humanAT) <- humanAT[,1]
humanAT <- humanAT[,c(2:ncol(humanAT))]
nsamples <- ncol(humanAT) - 1
samples <- colnames(humanAT)
totalReaddf <- read.table(fileTotalReads,header=F,stringsAsFactors = F,sep = "\t")
head(totalReaddf)
for(i in 1:nsamples){
df <- humanAT[,c(i,nsamples+1)]
dfX <- df[,c(1,2)]
head(dfX)
dfX <- dfX[rowSums(dfX) > 0,]
options(digits = 12)
dfX <- round(dfX[,c(1:2)],4)
scaleA <- totalReaddf[i,2]
scaleA <-  scaleA / 1000000
scaleA <- round(scaleA,2)
scaleA
scaleB <- totalReaddf[nsamples+(x-1),2]
scaleB <- scaleB / 1000000
scaleB <- round(scaleB,2)
scaleB
head(dfX)
dfX[,1] <- dfX[,1]*scaleA
head(dfX)
dfX[,2] <- dfX[,2]*scaleB
head(dfX)
dfX <- round(dfX[,c(1:2)],4)
dfX <- dfX+1
head(dfX)
corText <- cor( dfX[,1] , dfX[,2], method = "pearson" )
corText <- round(corText,2)
corText <- paste("pearson R=",corText)
corText
imgFile <- paste(samples[i], samples[nsamples+(x-1)],sep = "_vs_");
imgFile <- paste(imgFile,"_pearson.jpg",sep = "")
dfX <- dfX + 1
jpeg(imgFile,width = 1000, height = 1000,quality = 100,pointsize = 12,res=200)
par(mar=c(5,5,2,1))
plot(log10(dfX[,1]),log10(dfX[,2]),pch=16, xlab = samples[i], ylab = samples[nsamples+1])
mtext(corText)
abline(lm(log10(dfX[,2])~log10(dfX[,1])),col="red")
dev.off()
}
head(totalReaddf)
df <- humanAT[,c(i,nsamples+1)]
for(i in 1:nsamples){
df <- humanAT[,c(i,nsamples+1)]
dfX <- df[,c(1,2)]
head(dfX)
dfX <- dfX[rowSums(dfX) > 0,]
options(digits = 12)
dfX <- round(dfX[,c(1:2)],4)
scaleA <- totalReaddf[i,2]
scaleA <-  scaleA / 1000000
scaleA <- round(scaleA,2)
scaleA
scaleB <- totalReaddf[nsamples+(x-1),2]
scaleB <- scaleB / 1000000
scaleB <- round(scaleB,2)
scaleB
head(dfX)
dfX[,1] <- dfX[,1]*scaleA
head(dfX)
dfX[,2] <- dfX[,2]*scaleB
head(dfX)
dfX <- round(dfX[,c(1:2)],4)
dfX <- dfX+1
head(dfX)
corText <- cor( dfX[,1] , dfX[,2], method = "pearson" )
corText <- round(corText,2)
corText <- paste("pearson R=",corText)
corText
imgFile <- paste(samples[i], samples[nsamples+(x-1)],sep = "_vs_");
imgFile <- paste(imgFile,"_pearson.jpg",sep = "")
dfX <- dfX + 1
jpeg(imgFile,width = 1000, height = 1000,quality = 100,pointsize = 12,res=200)
par(mar=c(5,5,2,1))
plot(log10(dfX[,1]),log10(dfX[,2]),pch=16, xlab = samples[i], ylab = samples[nsamples+1])
mtext(corText)
abline(lm(log10(dfX[,2])~log10(dfX[,1])),col="red")
dev.off()
}
df <- humanAT[,c(i,nsamples+1)]
dfX <- df[,c(1,2)]
head(dfX)
head(humanAT)
df <- humanAT[,c(i,nsamples+1)]
dfX <- df[,c(1,2)]
head(dfX)
dfX <- dfX[rowSums(dfX) > 0,]
options(digits = 12)
dfX <- round(dfX[,c(1:2)],4)
scaleA <- totalReaddf[i,2]
scaleA <-  scaleA / 1000000
scaleA <- round(scaleA,2)
scaleA
scaleB <- totalReaddf[nsamples+(x-1),2]
scaleB <- scaleB / 1000000
scaleB <- round(scaleB,2)
scaleB
head(dfX)
dfX[,1] <- dfX[,1]*scaleA
head(dfX)
dfX[,2] <- dfX[,2]*scaleB
head(dfX)
dfX <- round(dfX[,c(1:2)],4)
dfX <- dfX+1
head(dfX)
corText <- cor( dfX[,1] , dfX[,2], method = "pearson" )
corText <- round(corText,2)
corText <- paste("pearson R=",corText)
corText
imgFile <- paste(samples[i], samples[nsamples+(x-1)],sep = "_vs_");
imgFile <- paste(imgFile,"_pearson.jpg",sep = "")
dfX <- dfX + 1
jpeg(imgFile,width = 1000, height = 1000,quality = 100,pointsize = 12,res=200)
setwd("~/Work/0_GitHub/DropSeq/correlation_analysis/sample_data/")
fileAT <- "AverageTrancriptsPerGene.txt"
fileTotalReads <- "TotalReadsPersample.txt"
humanAT <- read.table(fileAT,header = T,sep = "\t",stringsAsFactors = F)
humanAT[is.na(humanAT)] = 0
row.names(humanAT) <- humanAT[,1]
humanAT <- humanAT[,c(2:ncol(humanAT))]
nsamples <- ncol(humanAT) - 1
samples <- colnames(humanAT)
totalReaddf <- read.table(fileTotalReads,header=F,stringsAsFactors = F,sep = "\t")
head(totalReaddf)
for(i in 1:nsamples){
df <- humanAT[,c(i,nsamples+1)]
for(x in 1:nsamples){
dfX <- df[,c(1,nsamples+1)]
head(dfX)
dfX <- dfX[rowSums(dfX) > 0,]
options(digits = 12)
dfX <- round(dfX[,c(1:2)],4)
scaleA <- totalReaddf[i,2]
scaleA <-  scaleA / 1000000
scaleA <- round(scaleA,2)
scaleA
scaleB <- totalReaddf[nsamples+(x-1),2]
scaleB <- scaleB / 1000000
scaleB <- round(scaleB,2)
scaleB
head(dfX)
dfX[,1] <- dfX[,1]*scaleA
head(dfX)
dfX[,2] <- dfX[,2]*scaleB
head(dfX)
dfX <- round(dfX[,c(1:2)],4)
dfX <- dfX+1
head(dfX)
corText <- cor( dfX[,1] , dfX[,2], method = "pearson" )
corText <- round(corText,2)
corText <- paste("pearson R=",corText)
corText
imgFile <- paste(samples[i], samples[nsamples+(x-1)],sep = "_vs_");
imgFile <- paste(imgFile,"_pearson.jpg",sep = "")
print(imgFile)
print(i)
print(x)
dfX <- dfX + 1
jpeg(imgFile,width = 1000, height = 1000,quality = 100,pointsize = 12,res=200)
par(mar=c(5,5,2,1))
plot(log10(dfX[,1]),log10(dfX[,2]),pch=16, xlab = samples[i], ylab = samples[nsamples+1])
mtext(corText)
abline(lm(log10(dfX[,2])~log10(dfX[,1])))
dev.off()
plot(log10(dfX[,1]),log10(dfX[,2]),pch=16, xlab = samples[i], ylab = samples[nsamples+(x-1)])
plot <- ggplot(dfX,aes(x = log10(dfX[,1]), y= log10(dfX[,2]))) + geom_point()
plot
}
}
humanAT
head(humanAT)
nsamples <- ncol(humanAT) - 1
nsamples
df <- humanAT[,c(i,nsamples+1)]
df <- humanAT[,c(i,ncol(humanAT))]
dfX <- df[,c(1,nsamples+1)]
head(dfX)
humanAT[is.na(humanAT)] = 0
row.names(humanAT) <- humanAT[,1]
humanAT <- humanAT[,c(2:ncol(humanAT))]
setwd("~/Work/0_GitHub/DropSeq/correlation_analysis/sample_data/")
fileAT <- "AverageTrancriptsPerGene.txt"
fileTotalReads <- "TotalReadsPersample.txt"
humanAT <- read.table(fileAT,header = T,sep = "\t",stringsAsFactors = F)
humanAT[is.na(humanAT)] = 0
row.names(humanAT) <- humanAT[,1]
humanAT <- humanAT[,c(2:ncol(humanAT))]
nsamples <- ncol(humanAT) - 1
samples <- colnames(humanAT)
totalReaddf <- read.table(fileTotalReads,header=F,stringsAsFactors = F,sep = "\t")
head(totalReaddf)
head(humanAT)
df <- humanAT[,c(i,ncol(humanAT))]
dfX <- df[,c(1,nsamples+1)]
head(dfX)
setwd("~/Work/0_GitHub/DropSeq/correlation_analysis/sample_data/")
fileAT <- "AverageTrancriptsPerGene.txt"
fileTotalReads <- "TotalReadsPersample.txt"
humanAT <- read.table(fileAT,header = T,sep = "\t",stringsAsFactors = F)
humanAT[is.na(humanAT)] = 0
head(humanAT)
head(humanAT[is.na(humanAT)])
head(is.na(humanAT))
head(is.na(humanAT),10)
head(humanAT[is.na(humanAT)])
head(is.na(humanAT))
head(is.na(humanAT)=0)
head(,humanAT[is.na(humanAT)])
head(humanAT[,is.na(humanAT)])
head(humanAT[is.na(humanAT),])
humanAT[is.na(humanAT)] = 0
is.na(humanAT)
!is.na(humanAT)
head(humanAT[!is.na(humanAT)])
head(humanAT[!is.na(humanAT),])
head(humanAT[,!is.na(humanAT)])
humanAT[is.na(humanAT[1]),]
humanAT[is.na(humanAT[2]),]
humanAT[!is.na(humanAT[2]),]
head(humanAT[!is.na(humanAT[2]),])
head(humanAT[is.na(humanAT[2]),])
head(humanAT[is.na(humanAT[,2]),])
head(humanAT[is.na(humanAT[,1]),])
head(humanAT[is.na(humanAT[1,]),])
